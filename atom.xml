<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Siqin Dong</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://siqindong.github.io/"/>
  <updated>2020-11-15T00:51:41.214Z</updated>
  <id>https://siqindong.github.io/</id>
  
  <author>
    <name>Siqin Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gaussian Processes</title>
    <link href="https://siqindong.github.io/Gaussian%20Processes/"/>
    <id>https://siqindong.github.io/Gaussian%20Processes/</id>
    <published>2020-11-14T05:11:14.000Z</published>
    <updated>2020-11-15T00:51:41.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In supervised learning, we often use parametric models $p(\mathbf{y} \lvert \mathbf{X},\boldsymbol\theta)$ to explain data and infer optimal values of parameter $\boldsymbol\theta$ via <a href="https://en.wikipedia.org/wiki/Maximum_likelihood_estimation">maximum likelihood</a> or <a href="https://de.wikipedia.org/wiki/Maximum_a_posteriori">maximum a posteriori</a> estimation. If needed we can also infer a full <a href="https://en.wikipedia.org/wiki/Posterior_probability">posterior distribution</a> $p(\boldsymbol\theta \lvert \mathbf{X},\mathbf{y})$ instead of a point estimate $\boldsymbol{\hat\theta}$. With increasing data complexity, models with a higher number of parameters are usually needed to explain data reasonably well. Methods that use models with a fixed number of parameters are called parametric methods. </p><p>In non-parametric methods, on the other hand, the number of parameters depend on the dataset size. For example, in <a href="https://en.wikipedia.org/wiki/Kernel_regression">Nadaraya-Watson kernel regression</a>, a weight $w_i$ is assigned to each observed target $y_i$ and for predicting the target value at a new point $\mathbf{x}$ a weighted average is computed: </p><script type="math/tex; mode=display">\begin{align*}f(\mathbf{x}) &= \sum_{i=1}^{N}w_i(\mathbf{x})y_i \\w_i(\mathbf{x}) &= \frac{\kappa(\mathbf{x}, \mathbf{x}_{i})}{\sum_{i'=1}^{N}\kappa(\mathbf{x}, \mathbf{x}_{i'})}\end{align*}</script><p>Observations that are closer to $\mathbf{x}$ have a higher weight than observations that are further away. Weights are computed from $\mathbf{x}$ and observed $\mathbf{x}_i$ with a kernel $\kappa$. A special case is k-nearest neighbors (KNN) where the $k$ closest observations have a weight $1/k$, and all others have weight $0$. Non-parametric methods often need to process all training data for prediction and are therefore slower at inference time than parametric methods. On the other hand, training is usually faster as non-parametric models only need to remember training data. </p><p>Another example of non-parametric methods are <a href="https://en.wikipedia.org/wiki/Gaussian_process">Gaussian processes</a> (GPs). Instead of inferring a distribution over the parameters of a parametric function Gaussian processes can be used to infer a distribution over functions directly. A Gaussian process defines a prior over functions. After having observed some function values it can be converted into a posterior over functions. Inference of continuous function values in this context is known as GP regression but GPs can also be used for classification. </p><h2 id="Univariate-Gaussian-distribution"><a href="#Univariate-Gaussian-distribution" class="headerlink" title="Univariate Gaussian distribution"></a>Univariate Gaussian distribution</h2><p>The probability density function of a univariate Gaussian distribution:</p><script type="math/tex; mode=display">\begin{align*}p(\mathbf{x}) = \frac{1}{\sigma\sqrt{2\pi}}\exp (-\frac{(\mathbf{x}-\boldsymbol{\mu})^2}{2\sigma^2}) \tag{1}\label{eq1}\end{align*}</script><p>$\boldsymbol{\mu}$ is the mean or expectation of the distribution (and also its median and mode), while the parameter $\sigma$ is its standard deviation.The variance of the distribution is $\sigma^2$.</p><h2 id="Multivariate-Gaussian-distribution"><a href="#Multivariate-Gaussian-distribution" class="headerlink" title="Multivariate Gaussian distribution"></a>Multivariate Gaussian distribution</h2><p>The multivariate Gaussian distribution is a generalization of the univariate Gaussian distribution to higher dimensions. Assuming that the dimensions are independent of each other:</p><script type="math/tex; mode=display">\begin{align*}p(\mathbf{x}_{1}, \mathbf{x}_{2}, ..., \mathbf{x}_{N}) &= \prod_{i=1}^{N}p(\mathbf{x}_{i}) \\&= \frac{1}{(2\pi)^{\frac{N}{2}}\sigma_1\sigma_2...\sigma_N}\exp \left(-\frac{1}{2}\left [\frac{(\mathbf{x}_{1}-\boldsymbol{\mu}_{1})^2}{\sigma_1^2} + \frac{(\mathbf{x}_{2}-\boldsymbol{\mu}_{2})^2}{\sigma_2^2} + ... + \frac{(\mathbf{x}_{N}-\boldsymbol{\mu}_{N})^2}{\sigma_N^2}\right]\right) \tag{2}\label{eq2}\end{align*}</script><p>Equation $(2)$ in matrix form:</p><script type="math/tex; mode=display">\begin{align*}\mathbf{x}-\boldsymbol{\mu} &= [\mathbf{x}_{1}-\boldsymbol{\mu}_{1}, \mathbf{x}_{2}-\boldsymbol{\mu}_{2}, ..., \mathbf{x}_{N}-\boldsymbol{\mu}_{N}]^T \\\mathbf{K} &= \begin{bmatrix}\sigma_1^2 & 0 & \cdots & 0\\0 & \sigma_2^2 & \cdots & 0\\\vdots & \vdots & \ddots & 0\\0 & 0 & 0 & \sigma_N^2\end{bmatrix}\end{align*}</script><p>We have</p><script type="math/tex; mode=display">\begin{align*}|\mathbf{K}|^{\frac{1}{2}} &= \sigma_1\sigma_2...\sigma_N \\(\mathbf{x}-\boldsymbol{\mu})^T\mathbf{K}^{-1}(\mathbf{x}-\boldsymbol{\mu}) &= \frac{(\mathbf{x}_{1}-\boldsymbol{\mu}_{1})^2}{\sigma_1^2} + \frac{(\mathbf{x}_{2}-\boldsymbol{\mu}_{2})^2}{\sigma_2^2} + ... + \frac{(\mathbf{x}_{N}-\boldsymbol{\mu}_{N})^2}{\sigma_N^2}\end{align*}</script><p>Thus</p><script type="math/tex; mode=display">\begin{align*}p(\mathbf{x}) = (2\pi)^{-\frac{N}{2}}|\mathbf{K}|^{-\frac{1}{2}}\exp \left( -\frac{1}{2}(\mathbf{x}-\boldsymbol{\mu})^T\mathbf{K}^{-1}(\mathbf{x}-\boldsymbol{\mu}) \right) \tag{3}\label{eq3}\end{align*}</script><p>$\boldsymbol{\mu} \in \mathbb{R}^N$ is the mean vector, $\mathbf{K} \in \mathbb{R}^{N \times N}$ is the covariance matrix, since we assume that the dimensions are independent of each other, $\mathbf{K}$ is a diagonal matrix. When the variables are correlated, the form of Equation $(3)$ is still the same, the covariance matrix $\mathbf{K}$ is no longer a diagonal matrix and only has the properties of positive semi-definite and symmetric.</p><p>Equation $(3)$ is usually abbreviated as:</p><script type="math/tex; mode=display">\begin{align*}\mathbf{x} \sim \mathcal{N}(\boldsymbol{\mu}, \mathbf{K})\end{align*}</script><h2 id="Gaussian-Processes"><a href="#Gaussian-Processes" class="headerlink" title="Gaussian Processes"></a>Gaussian Processes</h2><p>A Gaussian process is a <a href="https://en.wikipedia.org/wiki/Stochastic_process">random process</a> where any point $\mathbf{x} = [\mathbf{x}_{1}, \mathbf{x}_{2}, \cdots, \mathbf{x}_{N}]$ is assigned a random variable $f(\mathbf{x}) = [f(\mathbf{x}_{1}), f(\mathbf{x}_{2}), \cdots, f(\mathbf{x}_{N})]$ and where the joint distribution of a finite number of these variables $p(f(\mathbf{x}_1),…,f(\mathbf{x}_N))$ is itself Gaussian:</p><script type="math/tex; mode=display">p(\mathbf{f} \lvert \mathbf{X}) = \mathcal{N}(\mathbf{f} \lvert \boldsymbol\mu, \mathbf{K})\tag{4}\label{eq4}</script><p>In Equation $(4)$, <script type="math/tex">\mathbf{f} = (f(\mathbf{x}_1),...,f(\mathbf{x}_N))</script>, <script type="math/tex">\boldsymbol\mu = (m(\mathbf{x}_1),...,m(\mathbf{x}_N))</script> and <script type="math/tex">K_{ij} = \kappa(\mathbf{x}_i,\mathbf{x}_j)</script>. $m$ is the mean function and it is common to use $m(\mathbf{x}) = 0$ as GPs are flexible enough to model the mean arbitrarily well. $\kappa$ is a positive definite <em>kernel function</em> or <em>covariance function</em>. Thus, a Gaussian process is a distribution over functions whose shape (smoothness, …) is defined by $\mathbf{K}$. If points $\mathbf{x}_i$ and $\mathbf{x}_j$ are considered to be similar by the kernel the function values at these points, $f(\mathbf{x}_i)$ and $f(\mathbf{x}_j)$, can be expected to be similar too. </p><p>A GP prior $p(\mathbf{f} \lvert \mathbf{X})$ can be converted into a GP posterior $p(\mathbf{f} \lvert \mathbf{X},\mathbf{y})$ after having observed some data $\mathbf{y}$. The posterior can then be used to make predictions <script type="math/tex">\mathbf{f}_*</script> given new input <script type="math/tex">\mathbf{X}_*</script>:</p><script type="math/tex; mode=display">\begin{align*}p(\mathbf{f}_* \lvert \mathbf{X}_*,\mathbf{X},\mathbf{y}) &= \int{p(\mathbf{f}_* \lvert \mathbf{X}_*,\mathbf{f})p(\mathbf{f} \lvert \mathbf{X},\mathbf{y})}\ d\mathbf{f} \\ &= \mathcal{N}(\mathbf{f}_* \lvert \boldsymbol{\mu}_*, \boldsymbol{\Sigma}_*)\tag{5}\label{eq5}\end{align*}</script><p>Equation $(5)$ is the posterior predictive distribution which is also a Gaussian with mean <script type="math/tex">\boldsymbol{\mu}_*</script> and <script type="math/tex">\boldsymbol{\Sigma}_*</script>. By definition of the GP, the joint distribution of observed data $\mathbf{y}$ and predictions <script type="math/tex">\mathbf{f}_*</script>  is</p><script type="math/tex; mode=display">\begin{bmatrix}\mathbf{y} \\ \mathbf{f}_*\end{bmatrix} \sim \mathcal{N}\left(\boldsymbol{0},\begin{bmatrix}\mathbf{K}_y & \mathbf{K}_* \\ \mathbf{K}_*^T & \mathbf{K}_{**}\end{bmatrix}\right)\tag{6}\label{eq6}</script><p>With $N$ training data and <script type="math/tex">N_*</script> new input data, <script type="math/tex">\mathbf{K}_y = \kappa(\mathbf{X},\mathbf{X}) + \sigma_y^2\mathbf{I} = \mathbf{K} + \sigma_y^2\mathbf{I}</script> is <script type="math/tex">N \times N</script>, <script type="math/tex">\mathbf{K}_* = \kappa(\mathbf{X},\mathbf{X}_*)</script> is <script type="math/tex">N \times N_*</script> and <script type="math/tex">\mathbf{K}_{**} = \kappa(\mathbf{X}_*,\mathbf{X}_*)</script> is <script type="math/tex">N_* \times N_*</script>. $\sigma_y^2$ is the noise term in the diagonal of $\mathbf{K_y}$. It is set to zero if training targets are noise-free and to a value greater than zero if observations are noisy. The mean is set to $\boldsymbol{0}$ for notational simplicity. The sufficient statistics of the posterior predictive distribution, <script type="math/tex">\boldsymbol{\mu}_*</script> and <script type="math/tex">\boldsymbol{\Sigma}_*</script>, can be computed with<sup>[1][3]</sup></p><script type="math/tex; mode=display">\begin{align*}\boldsymbol{\mu_*} &= \mathbf{K}_*^T \mathbf{K}_y^{-1} \mathbf{y}\tag{7}\label{eq7} \\\boldsymbol{\Sigma_*} &= \mathbf{K}_{**} - \mathbf{K}_*^T \mathbf{K}_y^{-1} \mathbf{K}_*\tag{8}\label{eq8}\end{align*}</script><p>This is the minimum we need to know for implementing Gaussian processes and applying them to regression problems. For further details, please consult the literature in the <a href="#References">References</a> section. The next section shows how to implement GPs with plain NumPy from scratch, later sections demonstrate how to use GP implementations from <a href="http://scikit-learn.org/stable/">scikit-learn</a>.</p><h2 id="Implementation-with-NumPy"><a href="#Implementation-with-NumPy" class="headerlink" title="Implementation with NumPy"></a>Implementation with NumPy</h2><p>Here, we will use the squared exponential kernel, also known as Gaussian kernel or RBF kernel:</p><script type="math/tex; mode=display">\kappa(\mathbf{x}_i,\mathbf{x}_j) = \sigma_f^2 \exp(-\frac{1}{2l^2}  (\mathbf{x}_i - \mathbf{x}_j)^T  (\mathbf{x}_i - \mathbf{x}_j))\tag{9}</script><p>The length parameter $l$ controls the smoothness of the function and $\sigma_f$ the vertical variation. For simplicity, we use the same length parameter $l$ for all input dimensions (isotropic kernel). </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kernel</span>(<span class="params">X1, X2, l=<span class="number">1.0</span>, sigma_f=<span class="number">1.0</span></span>):</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Isotropic squared exponential kernel. Computes </span></span><br><span class="line"><span class="string">    a covariance matrix from points in X1 and X2.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X1: Array of m points (m x d).</span></span><br><span class="line"><span class="string">        X2: Array of n points (n x d).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Covariance matrix (m x n).</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    sqdist = np.sum(X1**<span class="number">2</span>, <span class="number">1</span>).reshape(<span class="number">-1</span>, <span class="number">1</span>) + np.sum(X2**<span class="number">2</span>, <span class="number">1</span>) - <span class="number">2</span> * np.dot(X1, X2.T)</span><br><span class="line">    <span class="keyword">return</span> sigma_f**<span class="number">2</span> * np.exp(<span class="number">-0.5</span> / l**<span class="number">2</span> * sqdist)</span><br></pre></td></tr></tbody></table></figure><p>There are many other kernels that can be used for Gaussian processes. See [3] for a detailed reference or the scikit-learn documentation for <a href="http://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels">some examples</a>.</p><h3 id="Prior"><a href="#Prior" class="headerlink" title="Prior"></a>Prior</h3><p>Let’s first define a prior over functions with mean zero and a covariance matrix computed with kernel parameters $l=1$ and $\sigma_f=1$. To draw random functions from that GP we draw random samples from the corresponding multivariate normal. The following example draws ten random samples and plots it together with the zero mean and the 95% confidence interval (computed from the diagonal of the covariance matrix).</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Finite number of points</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># points we're going to make predictions at</span></span><br><span class="line">X = np.linspace(<span class="number">-5</span>, <span class="number">5</span>, n).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mean and covariance of the prior</span></span><br><span class="line">mu_prior = np.zeros(X.shape)</span><br><span class="line">cov_prior = kernel(X, X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw 10 samples from the prior</span></span><br><span class="line">number_of_samples = <span class="number">10</span></span><br><span class="line">samples_prior = np.random.multivariate_normal(mu_prior.ravel(), cov_prior, number_of_samples)</span><br><span class="line">plot_gp(mu_prior, cov_prior, X, samples=samples_prior)</span><br><span class="line">plt.title(<span class="string">f'<span class="subst">{number_of_samples}</span> samples from the GP prior (n = 100)'</span>)</span><br><span class="line">plt.axis([<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/1PCjDxdQRe5Z8AY.png"></div><p><br></p><p>The <code>plot_gp</code> function is defined here.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gp</span>(<span class="params">mu, cov, X, X_train=None, Y_train=None, samples=[]</span>):</span></span><br><span class="line">    plot_margin_of_error(X, mu, cov)</span><br><span class="line">    plt.plot(X, mu, label=<span class="string">'GP mean'</span>)</span><br><span class="line">    <span class="keyword">for</span> i, sample <span class="keyword">in</span> enumerate(samples):</span><br><span class="line">        plt.plot(X, sample, lw=<span class="number">1</span>, ls=<span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> X_train <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        plt.plot(X_train, Y_train, <span class="string">'rx'</span>, label=<span class="string">'Observed Data'</span>)</span><br></pre></td></tr></tbody></table></figure><p><br></p><p>The <code>plot_margin_of_error</code> function is defined here.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_margin_of_error</span>(<span class="params">X, mu, cov</span>):</span></span><br><span class="line">    X = X.ravel()</span><br><span class="line">    mu = mu.ravel()</span><br><span class="line">    uncertainty = <span class="number">1.96</span> * np.sqrt(np.diag(cov))  <span class="comment"># %95 Confidence interval</span></span><br><span class="line">    plt.fill_between(X, mu + uncertainty, mu - uncertainty, alpha=<span class="number">0.1</span>,</span><br><span class="line">                     label=<span class="string">'Margin of error (%95 Confidence interval)'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="Prediction-from-noise-free-training-data"><a href="#Prediction-from-noise-free-training-data" class="headerlink" title="Prediction from noise-free training data"></a>Prediction from noise-free training data</h3><p>To compute the sufficient statistics i.e. mean and covariance of the posterior predictive distribution we implement Equations $(7)$ and $(8)$</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> inv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">posterior_predictive</span>(<span class="params">X_s, X_train, Y_train, l=<span class="number">1.0</span>, sigma_f=<span class="number">1.0</span>, sigma_y=<span class="number">1e-8</span></span>):</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Computes the sufficient statistics of the GP posterior predictive distribution</span></span><br><span class="line"><span class="string">    from m training data X_train and Y_train and n new inputs X_s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_s: New input locations (n x d).</span></span><br><span class="line"><span class="string">        X_train: Training locations (m x d).</span></span><br><span class="line"><span class="string">        Y_train: Training targets (m x 1).</span></span><br><span class="line"><span class="string">        l: Kernel length parameter.</span></span><br><span class="line"><span class="string">        sigma_f: Kernel vertical variation parameter.</span></span><br><span class="line"><span class="string">        sigma_y: Noise parameter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Posterior mean vector (n x d) and covariance matrix (n x n).</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    K = kernel(X_train, X_train, l, sigma_f) + sigma_y ** <span class="number">2</span> * np.eye(len(X_train))</span><br><span class="line">    K_s = kernel(X_train, X_s, l, sigma_f)</span><br><span class="line">    K_ss = kernel(X_s, X_s, l, sigma_f) + <span class="number">1e-8</span> * np.eye(len(X_s))</span><br><span class="line">    K_inv = inv(K)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Equation (7)</span></span><br><span class="line">    mu_s = K_s.T.dot(K_inv).dot(Y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Equation (8)</span></span><br><span class="line">    cov_s = K_ss - K_s.T.dot(K_inv).dot(K_s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mu_s, cov_s</span><br></pre></td></tr></tbody></table></figure><p>and apply them to noise-free training data <code>X_train</code> and <code>Y_train</code>. The following example draws ten samples from the posterior predictive and plots them along with the mean, confidence interval and training data. In a noise-free model, variance at the training points is zero and all random functions drawn from the posterior go through the trainig points. </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Noise free training data</span></span><br><span class="line">X_train = np.array([<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">Y_train_noise_free = np.sin(X_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute mean and covariance of the posterior predictive distribution</span></span><br><span class="line">mu_s, cov_s = posterior_predictive(X, X_train, Y_train_noise_free)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw 10 samples from the posterior</span></span><br><span class="line">samples_posterior = np.random.multivariate_normal(mu_s.ravel(), cov_s, number_of_samples)</span><br><span class="line"></span><br><span class="line">plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train_noise_free, samples=samples_posterior)</span><br><span class="line">plt.title(<span class="string">f'<span class="subst">{number_of_samples}</span> samples from the GP posterior (n = 100)'</span>)</span><br><span class="line">plt.axis([<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/apMiwYxU1S5bPTy.png"></div><p><br></p><p>Comparison of true function and GP posterior.<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f_true = np.sin(X).flatten()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Gp mean</span></span><br><span class="line">plt.plot(X, mu_s, ls=<span class="string">'-'</span>, label=<span class="string">'GP mean'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot data observed</span></span><br><span class="line">plt.plot(X_train, Y_train_noise_free, <span class="string">'rx'</span>, label=<span class="string">'Observed Data'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot True function</span></span><br><span class="line">plt.plot(X, f_true, label=<span class="string">'True function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Margin of error (%95 Confidence interval)</span></span><br><span class="line">plot_margin_of_error(X, mu_s, cov_s)</span><br><span class="line">plt.axis([<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><table>    <tbody><tr>        <td><img src="https://i.loli.net/2020/10/11/apMiwYxU1S5bPTy.png"></td>        <td><img src="https://i.loli.net/2020/10/11/snN5p8c4a213AtR.png"></td>    </tr></tbody></table><h3 id="Prediction-from-noisy-training-data"><a href="#Prediction-from-noisy-training-data" class="headerlink" title="Prediction from noisy training data"></a>Prediction from noisy training data</h3><p>If some noise is included in the model, training points are only approximated and the variance at the training points is non-zero.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Noisy training data</span></span><br><span class="line">noise = <span class="number">0.4</span></span><br><span class="line">X_train = np.array([<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">Y_train_noisy = np.sin(X_train) + noise * np.random.randn(*X_train.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute mean and covariance of the posterior predictive distribution</span></span><br><span class="line">mu_s, cov_s = posterior_predictive(X, X_train, Y_train_noisy, sigma_y=noise)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw 10 samples from the posterior</span></span><br><span class="line">samples_posterior_noisy = np.random.multivariate_normal(mu_s.ravel(), cov_s, number_of_samples)</span><br><span class="line">plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train_noisy, samples=samples_posterior_noisy)</span><br><span class="line">plt.title(<span class="string">f'<span class="subst">{number_of_samples}</span> samples from the GP posterior (n = 100)'</span>)</span><br><span class="line">plt.axis([<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/JTyoUWwkn8vgDKH.png"></div><p><br></p><p>Comparison of true function and GP posterior.<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f_true = np.sin(X).flatten()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Gp mean</span></span><br><span class="line">plt.plot(X, mu_s, ls=<span class="string">'-'</span>, label=<span class="string">'GP mean'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot data observed</span></span><br><span class="line">plt.plot(X_train, Y_train_noisy, <span class="string">'rx'</span>, label=<span class="string">'Observed Data'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot True function</span></span><br><span class="line">plt.plot(X, f_true, label=<span class="string">'True function'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Margin of error (%95 Confidence interval)</span></span><br><span class="line">plot_margin_of_error(X, mu_s, cov_s)</span><br><span class="line">plt.axis([<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">3</span>])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><table>    <tbody><tr>        <td><img src="https://i.loli.net/2020/10/11/JTyoUWwkn8vgDKH.png"></td>        <td><img src="https://i.loli.net/2020/10/11/C9daYNwu4M5W2rq.png"></td>    </tr></tbody></table><h3 id="Effect-of-kernel-parameters-and-noise-parameter"><a href="#Effect-of-kernel-parameters-and-noise-parameter" class="headerlink" title="Effect of kernel parameters and noise parameter"></a>Effect of kernel parameters and noise parameter</h3><p>The following example shows the effect of kernel parameters $l$ and $\sigma_f$ as well as the noise parameter $\sigma_y$. Higher $l$ values lead to smoother functions and therefore to coarser approximations of the training data. Lower $l$ values make functions more wiggly with wide confidence intervals between training data points. $\sigma_f$ controls the vertical variation of functions drawn from the GP. This can be seen by the wide confidence intervals outside the training data region in the right figure of the second row. $\sigma_y$ represents the amount of noise in the training data. Higher $\sigma_y$ values make more coarse approximations which avoids overfitting to noisy data.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">params = [</span><br><span class="line">    (<span class="number">0.3</span>, <span class="number">1.0</span>, <span class="number">0.2</span>),</span><br><span class="line">    (<span class="number">3.0</span>, <span class="number">1.0</span>, <span class="number">0.2</span>),</span><br><span class="line">    (<span class="number">1.0</span>, <span class="number">0.3</span>, <span class="number">0.2</span>),</span><br><span class="line">    (<span class="number">1.0</span>, <span class="number">3.0</span>, <span class="number">0.2</span>),</span><br><span class="line">    (<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.05</span>),</span><br><span class="line">    (<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.5</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (l, sigma_f, sigma_y) <span class="keyword">in</span> enumerate(params):</span><br><span class="line">    mu_s, cov_s = posterior_predictive(X, X_train, Y_train_noisy, l=l,</span><br><span class="line">                                       sigma_f=sigma_f,</span><br><span class="line">                                       sigma_y=sigma_y)</span><br><span class="line">    plt.title(<span class="string">f'l = <span class="subst">{l}</span>, sigma_f = <span class="subst">{sigma_f}</span>, sigma_y = <span class="subst">{sigma_y}</span>'</span>)</span><br><span class="line">    plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train_noisy)</span><br><span class="line">    plt.axis([<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">3</span>])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></tbody></table></figure><table>    <tbody><tr>        <td><img src="https://i.loli.net/2020/10/11/BRNfYlsPL3J2Imx.png"></td>        <td><img src="https://i.loli.net/2020/10/11/3OCpPnfbsBI9d8K.png"></td>    </tr></tbody></table><table>    <tbody><tr>        <td><img src="https://i.loli.net/2020/10/11/aqxECbszmH5J7VN.png"></td>        <td><img src="https://i.loli.net/2020/10/11/ONlIuoDvdei4s9W.png"></td>    </tr></tbody></table><table>    <tbody><tr>        <td><img src="https://i.loli.net/2020/10/11/IMFoX2O56sHeZJz.png"></td>        <td><img src="https://i.loli.net/2020/10/11/5CNWtifgTPEUaIw.png"></td>    </tr></tbody></table><p><br></p><p>Optimal values for these parameters can be estimated by maximizing the log marginal likelihood which is given by<sup>[1][3]</sup></p><script type="math/tex; mode=display">\begin{align*}\log p(\mathbf{y} \lvert \mathbf{X}) &=\log \mathcal{N}(\mathbf{y} \lvert \boldsymbol{0},\mathbf{K}_y) \\&=-\frac{1}{2} \mathbf{y}^T \mathbf{K}_y^{-1} \mathbf{y} -\frac{1}{2} \log \begin{vmatrix}\mathbf{K}_y\end{vmatrix} -\frac{N}{2} \log(2\pi) \tag{10}\end{align*}</script><p>In the following we will minimize the negative log marginal likelihood w.r.t. parameters $l$ and $\sigma_f$, $\sigma_y$ is set to the known noise level of the data. If the noise level is unknown, $\sigma_y$ can be estimated as well along with the other parameters. </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> cholesky, det, lstsq</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nll_fn</span>(<span class="params">X_train, Y_train, noise, naive=True</span>):</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Returns a function that computes the negative log marginal</span></span><br><span class="line"><span class="string">    likelihood for training data X_train and Y_train and given</span></span><br><span class="line"><span class="string">    noise level.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train: training locations (m x d).</span></span><br><span class="line"><span class="string">        Y_train: training targets (m x 1).</span></span><br><span class="line"><span class="string">        noise: known noise level of Y_train.</span></span><br><span class="line"><span class="string">        naive: if True use a naive implementation of Eq. (10), if</span></span><br><span class="line"><span class="string">               False use a numerically more stable implementation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Minimization objective.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nll_naive</span>(<span class="params">theta</span>):</span></span><br><span class="line">        <span class="comment"># Naive implementation of Eq. (10). Works well for the examples</span></span><br><span class="line">        <span class="comment"># in this article but is numerically less stable compared to</span></span><br><span class="line">        <span class="comment"># the implementation in nll_stable below.</span></span><br><span class="line">        K = kernel(X_train, X_train, l=theta[<span class="number">0</span>], sigma_f=theta[<span class="number">1</span>]) + \</span><br><span class="line">            noise ** <span class="number">2</span> * np.eye(len(X_train))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> * np.log(det(K)) + \</span><br><span class="line">               <span class="number">0.5</span> * Y_train.T.dot(inv(K).dot(Y_train)) + \</span><br><span class="line">               <span class="number">0.5</span> * len(X_train) * np.log(<span class="number">2</span> * np.pi)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nll_stable</span>(<span class="params">theta</span>):</span></span><br><span class="line">        <span class="comment"># Numerically more stable implementation of Eq. (10) as described</span></span><br><span class="line">        <span class="comment"># in http://www.gaussianprocess.org/gpml/chapters/RW2.pdf, Section</span></span><br><span class="line">        <span class="comment"># 2.2, Algorithm 2.1.</span></span><br><span class="line">        K = kernel(X_train, X_train, l=theta[<span class="number">0</span>], sigma_f=theta[<span class="number">1</span>]) + \</span><br><span class="line">            noise ** <span class="number">2</span> * np.eye(len(X_train))</span><br><span class="line">        L = cholesky(K)</span><br><span class="line">        <span class="keyword">return</span> np.sum(np.log(np.diagonal(L))) + \</span><br><span class="line">               <span class="number">0.5</span> * Y_train.T.dot(lstsq(L.T, lstsq(L, Y_train)[<span class="number">0</span>])[<span class="number">0</span>]) + \</span><br><span class="line">               <span class="number">0.5</span> * len(X_train) * np.log(<span class="number">2</span> * np.pi)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> naive:</span><br><span class="line">        <span class="keyword">return</span> nll_naive</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> nll_stable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Minimize the negative log-likelihood w.r.t. parameters l and sigma_f.</span></span><br><span class="line"><span class="comment"># We should actually run the minimization several times with different</span></span><br><span class="line"><span class="comment"># initializations to avoid local minimal but this is skipped here for</span></span><br><span class="line"><span class="comment"># simplicity.</span></span><br><span class="line">res = minimize(nll_fn(X_train, Y_train_noisy, noise), [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">               bounds=((<span class="number">1e-5</span>, <span class="literal">None</span>), (<span class="number">1e-5</span>, <span class="literal">None</span>)),</span><br><span class="line">               method=<span class="string">'L-BFGS-B'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store the optimization results in global variables so that we can</span></span><br><span class="line"><span class="comment"># compare it later with the results from other implementations.</span></span><br><span class="line">l_opt, sigma_f_opt = res.x</span><br><span class="line">l_opt, sigma_f_opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute the posterior predictive statistics with optimized kernel parameters and plot the results</span></span><br><span class="line">mu_s, cov_s = posterior_predictive(X, X_train, Y_train_noisy, l=l_opt, sigma_f=sigma_f_opt, sigma_y=noise)</span><br><span class="line">plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train_noisy)</span><br><span class="line">plt.axis([<span class="number">-5</span>, <span class="number">5</span>, <span class="number">-3</span>, <span class="number">3</span>])</span><br><span class="line">plt.title(<span class="string">f'After parameter optimization:l = <span class="subst">{l_opt:<span class="number">.2</span>f}</span>, sigma_f = <span class="subst">{sigma_f_opt:<span class="number">.2</span>f}</span>, sigma_y = <span class="subst">{noise}</span>'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/bipGWgtfJeFOKrR.png"></div><p><br></p><p>With optimized kernel parameters, training data are reasonably covered by the 95% confidence interval and the mean of the posterior predictive is a good approximation.</p><h3 id="Higher-dimensions"><a href="#Higher-dimensions" class="headerlink" title="Higher dimensions"></a>Higher dimensions</h3><p>The above implementation can also be used for higher input data dimensions. Here, a GP is used to fit noisy samples from a sine wave originating at $\boldsymbol{0}$ and expanding in the x-y plane. The following plots show the noisy samples and the posterior predictive mean before and after kernel parameter optimization.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gp_2D</span>(<span class="params">gx, gy, mu, X_train, Y_train, title, i</span>):</span></span><br><span class="line">    ax = plt.gcf().add_subplot(<span class="number">1</span>, <span class="number">2</span>, i, projection=<span class="string">'3d'</span>)</span><br><span class="line">    ax.plot_surface(gx, gy, mu.reshape(gx.shape), cmap=cm.coolwarm, linewidth=<span class="number">0</span>, alpha=<span class="number">0.2</span>, antialiased=<span class="literal">False</span>)</span><br><span class="line">    ax.scatter(X_train[:, <span class="number">0</span>], X_train[:, <span class="number">1</span>], Y_train, c=Y_train, cmap=cm.coolwarm)</span><br><span class="line">    z = mu.reshape(gx.shape)</span><br><span class="line">    ax.contourf(gx, gy, z, zdir=<span class="string">'z'</span>, offset=<span class="number">0</span>, cmap=cm.coolwarm, alpha=<span class="number">0.6</span>)</span><br><span class="line">    ax.set_title(title)</span><br><span class="line"></span><br><span class="line">noise_2D = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">rx, ry = np.arange(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">0.3</span>), np.arange(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">0.3</span>)</span><br><span class="line">gx, gy = np.meshgrid(rx, rx)</span><br><span class="line"></span><br><span class="line">X_2D = np.c_[gx.ravel(), gy.ravel()]</span><br><span class="line"></span><br><span class="line">X_2D_train = np.random.uniform(<span class="number">-4</span>, <span class="number">4</span>, (<span class="number">100</span>, <span class="number">2</span>))</span><br><span class="line">Y_2D_train = np.sin(<span class="number">0.5</span> * np.linalg.norm(X_2D_train, axis=<span class="number">1</span>)) + \</span><br><span class="line">             noise_2D * np.random.randn(len(X_2D_train))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">mu_s, _ = posterior_predictive(X_2D, X_2D_train, Y_2D_train, sigma_y=noise_2D)</span><br><span class="line">plot_gp_2D(gx, gy, mu_s, X_2D_train, Y_2D_train,</span><br><span class="line">           <span class="string">f'Before parameter optimization: l=<span class="subst">{<span class="number">1.00</span>}</span> sigma_f=<span class="subst">{<span class="number">1.00</span>}</span>'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">res = minimize(nll_fn(X_2D_train, Y_2D_train, noise_2D), [<span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">               bounds=((<span class="number">1e-5</span>, <span class="literal">None</span>), (<span class="number">1e-5</span>, <span class="literal">None</span>)),</span><br><span class="line">               method=<span class="string">'L-BFGS-B'</span>)</span><br><span class="line"></span><br><span class="line">mu_s, _ = posterior_predictive(X_2D, X_2D_train, Y_2D_train, *res.x, sigma_y=noise_2D)</span><br><span class="line">plot_gp_2D(gx, gy, mu_s, X_2D_train, Y_2D_train,</span><br><span class="line">           <span class="string">f'After parameter optimization: l=<span class="subst">{res.x[<span class="number">0</span>]:<span class="number">.2</span>f}</span> sigma_f=<span class="subst">{res.x[<span class="number">1</span>]:<span class="number">.2</span>f}</span>'</span>, <span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><div align="center">  <img src="https://i.loli.net/2020/11/15/b5r4B6mWYzeqhOK.png"></div><p><br></p><p>Note how the true sine wave is approximated much better after parameter optimization.</p><h2 id="Library-that-implement-GPs"><a href="#Library-that-implement-GPs" class="headerlink" title="Library that implement GPs"></a>Library that implement GPs</h2><p>This section shows a example of library that provide implementation of GPs. Only a minimal setup will be provided here, just enough for reproducing the above results. For further details please consult the documentation of the library.</p><h3 id="Scikit-learn"><a href="#Scikit-learn" class="headerlink" title="Scikit-learn"></a>Scikit-learn</h3><p>Scikit-learn provides a <code>GaussianProcessRegressor</code> for implementing <a href="http://scikit-learn.org/stable/modules/gaussian_process.html#gaussian-process-regression-gpr">GP regression models</a>. It can be configured with <a href="http://scikit-learn.org/stable/modules/gaussian_process.html#gp-kernels">pre-defined kernels and user-defined kernels</a>. Kernels can also be composed. The squared exponential kernel is the <code>RBF</code> kernel in scikit-learn. The <code>RBF</code> kernel only has a <code>length_scale</code> parameter which corresponds to the $l$ parameter above. To have a $\sigma_f$ parameter as well, we have to compose the <code>RBF</code> kernel with a <code>ConstantKernel</code>.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.gaussian_process <span class="keyword">import</span> GaussianProcessRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.gaussian_process.kernels <span class="keyword">import</span> ConstantKernel, RBF</span><br><span class="line"></span><br><span class="line">rbf = ConstantKernel(<span class="number">1.0</span>) * RBF(length_scale=<span class="number">1.0</span>)</span><br><span class="line">gpr = GaussianProcessRegressor(kernel=rbf, alpha=noise**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reuse training data from previous 1D example</span></span><br><span class="line">gpr.fit(X_train, Y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute posterior predictive mean and covariance</span></span><br><span class="line">mu_s, cov_s = gpr.predict(X, return_cov=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Obtain optimized kernel parameters</span></span><br><span class="line">l = gpr.kernel_.k2.get_params()[<span class="string">'length_scale'</span>]</span><br><span class="line">sigma_f = np.sqrt(gpr.kernel_.k1.get_params()[<span class="string">'constant_value'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compare with previous results</span></span><br><span class="line"><span class="keyword">assert</span>(np.isclose(l_opt, l))</span><br><span class="line"><span class="keyword">assert</span>(np.isclose(sigma_f_opt, sigma_f))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the results</span></span><br><span class="line">plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train)</span><br></pre></td></tr></tbody></table></figure><div align="center">  <img src="https://i.loli.net/2020/10/11/RhfyaLoGKF3u7Vb.png"></div><p><br></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] Kevin P. Murphy. <a href="https://mitpress.mit.edu/books/machine-learning-0">Machine Learning, A Probabilistic Perspective</a>, Chapters 4, 14 and 15.<br>[2] Christopher M. Bishop. <a href="http://www.springer.com/de/book/9780387310732">Pattern Recognition and Machine Learning</a>, Chapter 6.<br>[3] Carl Edward Rasmussen and Christopher K. I. Williams. <a href="http://www.gaussianprocess.org/gpml/">Gaussian Processes for Machine Learning</a>.<br>[4] Guibo Wang. <a href="https://borgwang.github.io/ml/2019/07/28/gaussian-processes.html">Gaussian processes</a>.<br>[5] Martin Krasser. <a href="https://krasserm.github.io/2018/03/19/gaussian-processes/">Gaussian processes</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;In supervised learning, we oft
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PID temperature control</title>
    <link href="https://siqindong.github.io/PID%20temperature%20control/"/>
    <id>https://siqindong.github.io/PID%20temperature%20control/</id>
    <published>2020-10-16T01:59:16.000Z</published>
    <updated>2020-11-03T18:11:24.719Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import required libraries</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ArducamSSD1306.h&gt; // Modification of Adafruit_SSD1306 for ESP8266 compatibility</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Adafruit_GFX.h&gt;   // Needs a little change in original Adafruit library (See README.txt file)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Wire.h&gt;           // For I2C comm, but needed for not getting compile error</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HardWare I2C pins</span></span><br><span class="line"><span class="comment">A4   SDA</span></span><br><span class="line"><span class="comment">A5   SCL</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pin definitions</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OLED_RESET  16  <span class="comment">// Pin 16 -RESET digital signal</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGO16_GLCD_HEIGHT 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGO16_GLCD_WIDTH  16</span></span><br><span class="line"></span><br><span class="line"><span class="function">ArducamSSD1306 <span class="title">display</span><span class="params">(OLED_RESET)</span></span>; <span class="comment">// FOR I2C</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Variables</span></span><br><span class="line"><span class="keyword">float</span> temperature_read = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">float</span> set_temperature = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> PID_error = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> previous_error = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> PID_value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> PWM_pin = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">float</span> elapsedTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> currentMillis;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> previousMillis_pid = <span class="number">0</span>;  <span class="comment">//will store last time</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> period_pid = <span class="number">132</span>;         <span class="comment">// period at PID in ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//PID constants</span></span><br><span class="line"><span class="keyword">int</span> kp = <span class="number">9.1</span>;   <span class="keyword">int</span> ki = <span class="number">0.3</span>;   <span class="keyword">int</span> kd = <span class="number">1.8</span>;</span><br><span class="line"><span class="keyword">int</span> PID_p = <span class="number">0</span>;    <span class="keyword">int</span> PID_i = <span class="number">0</span>;    <span class="keyword">int</span> PID_d = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//NTC 3950 100K ohm Thermistor Sensor</span></span><br><span class="line"><span class="keyword">int</span> ThermistorPin = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Vo;</span><br><span class="line"><span class="keyword">float</span> R1 = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">float</span> logR2, R2, T, Tc, Tf;</span><br><span class="line"><span class="keyword">float</span> c1 = <span class="number">1.009249522e-03</span>, c2 = <span class="number">2.378405444e-04</span>, c3 = <span class="number">2.019202697e-07</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// SSD1306 Init</span></span><br><span class="line">  display.begin();  <span class="comment">// Switch OLED</span></span><br><span class="line"></span><br><span class="line">  pinMode(PWM_pin,OUTPUT);</span><br><span class="line">  TCCR2B = TCCR2B &amp; B11111000 | <span class="number">0x03</span>;    <span class="comment">// pin 3 and 11 PWM frequency of 980.39 Hz</span></span><br><span class="line">  </span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>{</span><br><span class="line">  currentMillis = millis(); <span class="comment">// store the current time</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (currentMillis - previousMillis_pid &gt;= period_pid) { <span class="comment">// check if 100ms passed</span></span><br><span class="line">    displayTemp();</span><br><span class="line">    </span><br><span class="line">    Serial.print(set_temperature);</span><br><span class="line">    Serial.print(<span class="string">"\t"</span>); <span class="comment">// or Serial.print(" ")</span></span><br><span class="line">    Serial.print(temperature_read);</span><br><span class="line">    Serial.print(<span class="string">"\t"</span>); <span class="comment">// or Serial.print(" ")</span></span><br><span class="line">    Serial.print(currentMillis - previousMillis_pid);</span><br><span class="line">    Serial.print(<span class="string">"\t"</span>); <span class="comment">// or Serial.print(" ")</span></span><br><span class="line">    Serial.print(elapsedTime);</span><br><span class="line">    Serial.print(<span class="string">"\t"</span>); <span class="comment">// or Serial.print(" ")</span></span><br><span class="line">    Serial.println(PID_value);</span><br><span class="line">    </span><br><span class="line">    previousMillis_pid = currentMillis; <span class="comment">// save the last time</span></span><br><span class="line"></span><br><span class="line">    set_temperature = setTemp();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//First we read the real value of temperature</span></span><br><span class="line">    temperature_read = readThermocouple();</span><br><span class="line">    <span class="comment">//Next we calculate the error between the setpoint and the real value</span></span><br><span class="line">  </span><br><span class="line">    PID_error = set_temperature - temperature_read;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Calculate the P value</span></span><br><span class="line">    PID_p = kp * PID_error;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Calculate the I value in a range on +-3</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-3</span> &lt; PID_error &lt;<span class="number">3</span>)</span><br><span class="line">    {</span><br><span class="line">      PID_i = PID_i + (ki * PID_error);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//For derivative we need real time to calculate speed change rate</span></span><br><span class="line">    elapsedTime = <span class="keyword">float</span>(period_pid)/<span class="number">1000</span>;</span><br><span class="line">    PID_d = kd*((PID_error - previous_error)/elapsedTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Final total PID value is the sum of P + I + D</span></span><br><span class="line">    PID_value = PID_p + PID_i + PID_d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//We define PWM range between 0 and 255</span></span><br><span class="line">    <span class="keyword">if</span>(PID_value &lt; <span class="number">0</span>)</span><br><span class="line">    {    PID_value = <span class="number">0</span>;    }</span><br><span class="line">    <span class="keyword">if</span>(PID_value &gt; <span class="number">255</span>)  </span><br><span class="line">    {    PID_value = <span class="number">255</span>;  }</span><br><span class="line">    <span class="comment">//Now we can write the PWM signal to the mosfet on digital pin D3</span></span><br><span class="line">    analogWrite(PWM_pin,<span class="number">255</span>-PID_value);</span><br><span class="line">    previous_error = PID_error;     <span class="comment">//Remember to store the previous error for next loop.</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setTemp</span><span class="params">()</span></span>{</span><br><span class="line">  <span class="keyword">int</span> Val = analogRead(A1); <span class="comment">//read the input on analog pin 1</span></span><br><span class="line">  Val = <span class="built_in">map</span>(Val, <span class="number">0</span>, <span class="number">1023</span>, <span class="number">99</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> Val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">readThermocouple</span><span class="params">()</span> </span>{</span><br><span class="line">  Vo = analogRead(ThermistorPin);</span><br><span class="line">  R2 = R1 * (<span class="number">1023.0</span> / (<span class="keyword">float</span>)Vo - <span class="number">1.0</span>);</span><br><span class="line">  logR2 = <span class="built_in">log</span>(R2);</span><br><span class="line">  T = (<span class="number">1.0</span> / (c1 + c2*logR2 + c3*logR2*logR2*logR2));</span><br><span class="line">  Tc = T - <span class="number">273.15</span>;</span><br><span class="line">  Tf = (Tc * <span class="number">9.0</span>)/ <span class="number">5.0</span> + <span class="number">32.0</span>; </span><br><span class="line">  <span class="keyword">return</span> Tc;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">displayTemp</span><span class="params">()</span> </span>{</span><br><span class="line">  </span><br><span class="line">  display.clearDisplay();</span><br><span class="line">  display.setTextColor(WHITE);</span><br><span class="line">  </span><br><span class="line">  display.setTextSize(<span class="number">1</span>);</span><br><span class="line">  display.setCursor(<span class="number">10</span>, <span class="number">8</span>);</span><br><span class="line">  display.print(<span class="string">"Temperature"</span>);</span><br><span class="line"></span><br><span class="line">  display.setCursor(<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">  display.setTextSize(<span class="number">2</span>);</span><br><span class="line">  display.print(F(<span class="string">"S:"</span>));</span><br><span class="line">  display.print(set_temperature);</span><br><span class="line">  display.print(F(<span class="string">" C"</span>));</span><br><span class="line">  </span><br><span class="line">  display.setCursor(<span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line">  display.setTextSize(<span class="number">2</span>);</span><br><span class="line">  display.print(F(<span class="string">"R:"</span>));</span><br><span class="line">  display.print(Tc);</span><br><span class="line">  display.print(F(<span class="string">" C"</span>));</span><br><span class="line">  </span><br><span class="line">  display.display();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//====================================================================================================</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
    
    
      <category term="Arduino" scheme="https://siqindong.github.io/tags/Arduino/"/>
    
  </entry>
  
</feed>
